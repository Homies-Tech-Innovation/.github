# File: .github/.github/workflows/setup-branches.yml
name: Reusable - Setup Branch Protection

on:
  workflow_call:
    inputs:
      main-checks:
        description: "CSV of status checks for the main branch"
        type: string
        default: "security"
      dev-checks:
        description: "CSV of status checks for the dev branch"
        type: string
        default: "security, ruff-format, prettier-format"
    secrets:
      GH_TOKEN:
        required: true

permissions: write-all

jobs:
  protect-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Protect 'main' branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const branchName = 'main';
            const requiredChecks = '${{ inputs.main-checks }}'
              .split(',')
              .map(s => s.trim())
              .filter(Boolean); // Removes empty strings if CSV is messy

            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName,
              required_status_checks: {
                strict: true,
                contexts: requiredChecks
              },
              enforce_admins: null, // Let organization settings decide
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
              },
              required_linear_history: false,
              allow_force_pushes: false,
              allow_deletions: false,
              required_conversation_resolution: true,
              restrictions: null
            });
            console.log(`üîí Branch protection configured for '${branchName}' with checks: ${requiredChecks.join(', ')}`);

      - name: Protect 'dev' branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const branchName = 'dev';
            const requiredChecks = '${{ inputs.dev-checks }}'
              .split(',')
              .map(s => s.trim())
              .filter(Boolean);

            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branchName,
              });
            } catch (error) {
              if (error.status === 404) {
                console.log(`‚ö†Ô∏è Branch '${branchName}' not found. Skipping protection for it.`);
                return; // Exit script successfully
              }
              throw error; // Re-throw other errors
            }

            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branchName,
              required_status_checks: {
                strict: true,
                contexts: requiredChecks
              },
              enforce_admins: null,
              required_pull_request_reviews: null, // No PR reviews required to merge into dev
              required_linear_history: true,
              allow_force_pushes: false,
              allow_deletions: false,
              required_conversation_resolution: true,
              restrictions: null
            });
            console.log(`üîí Branch protection configured for '${branchName}' with checks: ${requiredChecks.join(', ')}`);
