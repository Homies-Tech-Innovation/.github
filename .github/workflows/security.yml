# File: .github/.github/workflows/security.yml
name: Reusable - Security Checks
on:
  workflow_call:
    inputs:
      languages:
        description: "Comma-separated list of languages to scan (e.g., javascript,python)"
        required: false
        type: string
        default: "javascript,python"
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      # THIS IS THE NEW, BULLETPROOF DETECTION STEP
      - name: Detect if analyzable code exists
        id: detect_code
        run: |
          # Find any .js, .ts, or .py file that is NOT in a common junk/dependency/build directory.
          # -print -quit makes it stop searching immediately after finding the very first match.
          # This is extremely fast.
          if find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" \) \
            -not -path "./.git/*" \
            -not -path "./node_modules/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" \
            -not -path "./coverage/*" \
            -not -path "./*venv*/*" \
            -not -path "./__pycache__/*" \
            -print -quit | grep -q .; then
            echo "Analyzable code found. Proceeding with CodeQL."
            echo "run_codeql=true" >> $GITHUB_OUTPUT
          else
            echo "No analyzable code found. Skipping CodeQL."
            echo "run_codeql=false" >> $GITHUB_OUTPUT
          fi

      # NOTE: This only runs if the step above found code.
      - name: Initialize CodeQL
        if: steps.detect_code.outputs.run_codeql == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.languages }} # Pass the original languages list
          queries: security-extended

      # NOTE: This also only runs if the step above found code.
      - name: Perform CodeQL Analysis
        if: steps.detect_code.outputs.run_codeql == 'true'
        uses: github/codeql-action/analyze@v3

      - name: Secret detection with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // This logic is now simple and correct.
            const codeqlSkipped = '${{ steps.detect_code.outputs.run_codeql }}' !== 'true';
            const comment = `
            ## üõ°Ô∏è Security Scan Summary
            - ‚úÖ **Trivy vulnerability scan**: Completed
            - ${codeqlSkipped ? '‚è≠Ô∏è' : '‚úÖ'} **CodeQL analysis**: ${codeqlSkipped ? 'Skipped (no source code found)' : 'Completed'}
            - ‚úÖ **Secret detection**: Completed
            Please check the 'Security' tab for detailed results.
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
